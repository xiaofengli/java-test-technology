{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 ArialMT;\f4\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue192;\red106\green62\blue62;\red42\green0\blue255;
\red27\green29\blue31;\red235\green236\blue237;\red104\green26\blue29;\red43\green39\blue19;\red36\green38\blue41;
\red13\green0\blue129;\red37\green127\blue159;\red0\green0\blue0;\red42\green0\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\fs48 \cf0 RedisDocumentation
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
Problem,\
\
1. Often put method or save method in service level called RedisTemplate.set(key, value)\
to save object in redis db.\
\
for example, it looks like this,\
\
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf0   \cf2 redisTemplate\cf0 .opsForValue().set(\
                buildKey(\cf2 USER_ATTRIBUTE_UUID\cf0 , \cf3 user\cf0 .getUuid()), \cf3 user\cf0 );\
\
....\
\
\
and it uses the following api,\
\
    \cf2 redisTemplate\cf0 .convertAndSend(\cf4 "saveUser"\cf0 , \cf3 user\cf0 );\
\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 but when we made the query in the command line, we saw nil,\
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2 \cf0 \CocoaLigature0 xiaofengmaclap:~ xiaofeng$ redis-cli\
127.0.0.1:6379> get cloud:user:uuid:85758d76-d46a-4d6e-9a26-18ff1b3d1334\
(nil)
\f0\fs24 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
2. Serializer\
\
\pard\pardeftab720\sl540\sa420\partightenfactor0

\f3\b\fs42 \cf5 \expnd0\expndtw0\kerning0
In short\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\b0\fs30 \cf5 You have to configure serializers.\
\pard\pardeftab720\sl540\sa420\partightenfactor0

\b\fs42 \cf5 Explanation\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\b0\fs30 \cf5 The Redis template uses serializers for keys, values and hash keys/values. Serializers are used to convert the Java input into the representation that is stored within Redis. If you do not configure anything, the serializer defaults to 
\f2\fs26 \cb6 JdkSerializationRedisSerializer
\f3\fs30 \cb1 . So if you ask for a key 
\f2\fs26 \cb6 key
\f3\fs30 \cb1  in your Java code, the serializer converts it to\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf7 \cb6 "\\xac\\xed\\x00\\x05t\\x00\\x03key"\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\fs30 \cf5 \cb1 and Spring Data Redis uses those bytes as the key to query Redis.\
You can add data with Spring Data Redis and query it using the 
\f2\fs26 \cb6 redis-cli
\f3\fs30 \cb1 :\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf9 \cb6 template.boundSetOps(\cf7 "myKey"\cf9 ).add(\cf10 new\cf9  \cf11 Date\cf9 ());\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\fs30 \cf5 \cb1 and then in the 
\f2\fs26 \cb6 redis-cli
\f3\fs30 \cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf7 \cb6 127.0\cf9 .\cf7 0.1\cf9 :\cf7 6379\cf9 > keys *\
\cf7 1\cf9 ) \cf7 "\\xac\\xed\\x00\\x05t\\x00\\x05myKey"\cf9 \
\cf7 127.0\cf9 .\cf7 0.1\cf9 :\cf7 6379\cf9 > SMEMBERS \cf7 "\\xac\\xed\\x00\\x05t\\x00\\x05myKey"\cf9 \
\cf7 1\cf9 ) \cf7 "\\xac\\xed\\x00\\x05sr\\x00\\x0ejava.util.Datehj\\x81\\x01KYt\\x19\\x03\\x00\\x00xpw\\b\\x00\\x00\\x01N\\xcf#\\x9cHx"\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\fs30 \cf5 \cb1 As you see, the String and the Date are serialized into some crazy bytes that represent a Java-serialized object.\
Your code suggests you want to store String-based keys and values. Just set the 
\f2\fs26 \cb6 StringRedisSerializer
\f3\fs30 \cb1  in your 
\f2\fs26 \cb6 RedisTemplate
\f3\fs30 \cb1 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\b \cf5 Java configuration
\b0 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf9 \cb6 redisTemplate.setKeySerializer(\cf10 new\cf9  \cf11 StringRedisSerializer\cf9 ());\
redisTemplate.setValueSerializer(\cf10 new\cf9  \cf11 StringRedisSerializer\cf9 ());\
\
\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\b\fs30 \cf5 \cb1 XML configuration
\b0 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf9 \cb6 <bean id=\cf7 "stringSerializer"\cf9  \cf10 class\cf9 =\cf7 "org.springframework.data.redis.serializer.StringRedisSerializer"\cf9 />\
\
<bean id=\cf7 "redisTemplate"\cf9  \cf10 class\cf9 =\cf7 "org.springframework.data.redis.core.RedisTemplate"\cf9  \
    p:connection-factory-ref=\cf7 "jedisConnectionFactory"\cf9 >\
    <property name=\cf7 "keySerializer"\cf9  ref=\cf7 "stringSerializer"\cf9 />\
    <property name=\cf7 "valueSerializer"\cf9  ref=\cf7 "stringSerializer"\cf9 />\
</bean>\
\
<bean id=\cf7 "jedisConnectionFactory"\cf9  \cf10 class\cf9 =\cf7 "org.springframework.data.redis.connection.jedis.JedisConnectionFactory"\cf9  \
    p:host-name=\cf7 "myhostname"\cf9  p:port=\cf7 "6379"\cf9 />\cf8 \
\
\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\fs30 \cf5 \cb1 The output after running your code looks like then:\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf9 \cb6 value\
key\
[value]\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f3\fs30 \cf5 \cb1 Spring Data Redis has some interesting serializers that allow message exchange between various systems. You can choose either from the built-in serializers\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\sa150\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
JacksonJsonRedisSerializer\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Jackson2JsonRedisSerializer\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
JdkSerializationRedisSerializer (default)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
OxmSerializer\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
GenericToStringSerializer\
\pard\pardeftab720\sl340\sa300\partightenfactor0
\cf5 or create your own.\
I used Spring Data Redis 1.5.1.RELEASE and jedis 2.6.2 to verify the result of your question. HTH, Mark\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs34 \cf0 Do note that the storage format is not limited only to values - it can be used for keys, values or hashes without any restrictions.
\f2\fs26 \cf8 \cb6 \
\pard\pardeftab720\sl300\partightenfactor0
\cf8 \
3. CLI to validate your data\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf12 \cb1 \outl0\strokewidth0 \strokec12 To show it in the cli, the key serializer has to be 
\f1\fs22 \cf13 \strokec13 StringRedisSerializer.
\f0\fs24 \cf12 \strokec12 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf13 \strokec13 Serializer is the concept of string conversion. So String Serializer means it will be intact as String, default jdk serializer will hash it so key is unreadable. json serializer is to convert the result to json format.\
\uc0\u8232 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf12 \strokec12 redis has database concept or simply called namespaces, you will not see things by doing \
\uc0\u8232 \
"keys *" in a wrong namespace, to do it so, you should always check which one contains keys.\
For example, the following is a good example,\
\uc0\u8232 \
\pard\pardeftab720\sl260\partightenfactor0

\f2\fs22 \cf12 xiaofengmaclap:scripts xiaofeng$ redis-cli INFO | grep ^db\
db1:keys=4,expires=0,avg_ttl=0\
xiaofengmaclap:scripts xiaofeng$ redis-cli\
127.0.0.1:6379> select 1\
OK\
127.0.0.1:6379[1]> keys *\
1) "cloud:user:email:xiaofeng@wolfram.com"\
2) "cloud:user:uuid:85758d76-d46a-4d6e-9a26-18ff1b3d1334"\
3) "cloud:user:id:159818"\
4) "cloudmonitoring:sessions\
\pard\pardeftab720\sl300\partightenfactor0

\fs26 \cf8 \cb6 \outl0\strokewidth0 \
\
ref:\
\
\pard\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer"}}{\fldrslt \cf8 http://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer}}\
\
\pard\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/31608394/get-set-value-from-redis-using-redistemplate"}}{\fldrslt \cf8 http://stackoverflow.com/questions/31608394/get-set-value-from-redis-using-redistemplate}}\
\
\pard\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer"}}{\fldrslt \cf8 http://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer}}\
\
}